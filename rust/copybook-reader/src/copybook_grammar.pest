whitespace = _{ " " }

picture = _{
    // In Cobol Picture clauses are used to define the attributes of the data type.
    // This is a silent rule because although it identifies a data type clause it does
    // not provide actual value to the CopybookDefinition structure.
    "PIC"
}

level = { 
    ASCII_DIGIT+ 
}

integer = {
    ASCII_DIGIT+
}

label = {
    // labels must start with at least one letter or number but they can be followed by
    // any combination of letters, numbers, or dashes
    ASCII_ALPHANUMERIC 
    ~ (
        ASCII_ALPHANUMERIC
        | "-"
      )*
}

data_type = {
    picture
    ~ whitespace+
    ~ (
        alphanumeric_type
        | numeric_type
    )
}

// This rule is mean to match patterns in the copybook such as "9(2)", "99", or "X(4)" in such a
// way that if the parenthesis form is used the integer length value can be extracted or if the
// repeated 9 or X form is used the number of repetitions can be extracted. This rule is not meant
// to identify whether a 9, X, or V clause is being used that must be matched before this rule
// without making progress with the & terminal.
length_literal = {
    // match the first character and push it onto the stack to be referenced later
    PUSH(ASCII_ALPHANUMERIC)
    ~ (
        // Matches the parenthesis form which is expected to contain an integer value.
        (
            "("
            ~ integer
            ~ ")"
        )
        // Matches the repeatedSupports the numeric data type format 9999
        | ( PEEK* )
    )
    // Since the character is not needed outside of this rule we are going to drop it from the
    // stack to be safe. Dropped stack characters are not required to be matched.
    ~ DROP
}

numeric_type = {
    // Numeric types always start with 9 but since the length_literal rule needs the
    // 9 to operate correctly we are not going to consume the character.
    &"9"
    ~ length_literal
}

alphanumeric_type = {
    // alphanumeric types always start with X but since the length_literal rule needs the
    // X to operate correctly we are not going to consume the character.
    &"X"
    ~ length_literal
}

field = {
    label ~ whitespace+ ~ data_type
}

group = {
    label
}

statement = {
    whitespace*
    ~ level
    ~ whitespace+
    ~ (field | group)
    ~ "."
}

file = {
    SOI
    ~ (
        statement
        ~ NEWLINE?
      )+
    ~ whitespace* // Some copybooks may have trailing whitespace
    ~ EOI
}